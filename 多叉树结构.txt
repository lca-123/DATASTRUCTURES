多叉树结构：

2-3树：
含有二节点和三节点的排序树。（即满足二叉排序树的要求）
二节点：存储一个数据 有两个节点 或 没有节点（左子树的数据小于本节点数据 右子树数据大于本节点数据）
三节点：存储两个数据 有三个节点 或 没有节点（左子树数据小于本本节点的左数据 中子树数据介于本节点左右数据之间 右子树数据大于本节点右数据）
所有叶子节点都位于同一层

2-3 -4树：
与2-3树相同 多一个四节点

B-树 Balance-Tree
B-树的阶：节点的最多子节点个数。2-3树阶为3，2-3-4树为4.
B-树的搜索：从根节点开始，对节点内关键字（有序）进行二分查找，命中则结束；否则进入查询关键字范围的儿子节点；重复，直到已经是叶子节点
关键字分布整合在整颗树中，即叶子节点和非叶子节点都存放数据
搜索可能在非叶子节点结束
其搜索性能等价于在关键字全集内做二分查找

B+树
B+树的搜索与B树基本相同 区别是B+树只有到叶子节点才会命中，其性能也等于在全集做二分查找
所有关键字都存储在叶子节点的链表中【稠密索引】，链表中的关键字也是有序的
不可能在非叶子节点命中
非叶子节点相当于叶子节点的索引【稀疏索引】，叶子节点相当于数据层
更适合文件索引系统
B+树和B树各有应用场景，没有绝对的优劣

B*树
B*树是B+树的一种变体，在B+树的非根和非叶子节点增加指向兄弟的指针
B*树比B+树的空间利用率更高
